{"ast":null,"code":"var _jsxFileName = \"/Users/u089981/Documents/react/react-hooks-demo/src/ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\n\nconst ImageToggleOnScroll = ({\n  primaryImage,\n  secondaryImage\n}) => {\n  const imageRef = useRef(null);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n\n  useEffect(() => {\n    // runs when component mounts\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(isInView());\n    setIsLoading(false);\n    return () => {\n      // returns when component unmounts\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  }, [isLoading]);\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  return isLoading ? null : __jsx(\"img\", {\n    src: inView ? secondaryImage : primaryImage,\n    alt: \"\",\n    ref: imageRef,\n    width: \"500\",\n    height: \"500\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["/Users/u089981/Documents/react/react-hooks-demo/src/ImageToggleOnScroll.js"],"names":["React","useEffect","useState","useRef","ImageToggleOnScroll","primaryImage","secondaryImage","imageRef","isLoading","setIsLoading","scrollHandler","setInView","isInView","window","addEventListener","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAACC,EAAAA,YAAD;AAAeC,EAAAA;AAAf,CAAD,KAAoC;AAE9D,QAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM;AAAA,OAACK,SAAD;AAAA,OAAYC;AAAZ,MAA4BP,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMQ,aAAa,GAAG,MAAM;AAC1BC,IAAAA,SAAS,CAAC,MAAM;AACd,aAAOC,QAAQ,EAAf;AACD,KAFQ,CAAT;AAGD,GAJD;;AAMAX,EAAAA,SAAS,CAAC,MAAM;AAAE;AAChBY,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCJ,aAAlC;AACAC,IAAAA,SAAS,CAACC,QAAQ,EAAT,CAAT;AACAH,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAQ,MAAM;AAAE;AACdI,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCL,aAArC;AACD,KAFD;AAGD,GAPQ,EAON,CAACF,SAAD,CAPM,CAAT;AASA,QAAM;AAAA,OAACQ,MAAD;AAAA,OAASL;AAAT,MAAsBT,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMU,QAAQ,GAAG,MAAM;AACrB,QAAIL,QAAQ,CAACU,OAAb,EAAsB;AACpB,YAAMC,IAAI,GAAGX,QAAQ,CAACU,OAAT,CAAiBE,qBAAjB,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAY,CAAZ,IAAiBF,IAAI,CAACG,MAAL,IAAeR,MAAM,CAACS,WAA9C;AACD;;AACD,WAAO,KAAP;AACD,GAND;;AAQA,SAAOd,SAAS,GAAG,IAAH,GACd;AACE,IAAA,GAAG,EAAEQ,MAAM,GAAGV,cAAH,GAAoBD,YADjC;AAEE,IAAA,GAAG,EAAC,EAFN;AAGE,IAAA,GAAG,EAAEE,QAHP;AAIE,IAAA,KAAK,EAAC,KAJR;AAKE,IAAA,MAAM,EAAC,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CAvCD;;AAyCA,eAAeH,mBAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\nconst ImageToggleOnScroll = ({primaryImage, secondaryImage}) => {\n\n  const imageRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n\n  useEffect(() => { // runs when component mounts\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(isInView());\n    setIsLoading(false);\n    return (() => { // returns when component unmounts\n      window.removeEventListener(\"scroll\", scrollHandler);\n    });\n  }, [isLoading]);\n\n  const [inView, setInView] = useState(false);\n\n  const isInView = () => {\n    if (imageRef.current) {\n      const rect = imageRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n    return false;\n  };\n\n  return isLoading ? null : (\n    <img\n      src={inView ? secondaryImage : primaryImage}\n      alt=\"\"\n      ref={imageRef}\n      width=\"500\"\n      height=\"500\"\n    />\n  );\n};\n\nexport default ImageToggleOnScroll;"]},"metadata":{},"sourceType":"module"}